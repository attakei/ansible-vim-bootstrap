---
# tasks file for vim-bootstrap
- fail:
    msg: 'vim_config must be "vim" or "nvim"'
  when: vim_command not in ['vim', 'nvim']
- set_fact:
    vim_config_dir: '{{ ansible_env.HOME }}/.config/{{ vim_command }}'
    vim_config_path: '{{ vim_config_dir }}/init.vim'
    vim_localbundles_path: '{{ vim_config_dir }}/local_bundles.vim'
    vim_localconfig_path: '{{ vim_config_dir }}/local_init.vim'
  when: vim_command == 'nvim'
- set_fact:
    vim_config_path: '{{ ansible_env.HOME }}/.vim/vimrc'
    vim_config_dir: '{{ ansible_env.HOME }}/.vim'
    vim_localbundles_path: '{{ ansible_env.HOME }}/.vimrc.local.bundles'
    vim_localconfig_path: '{{ ansible_env.HOME }}/.vimrc.local'
  when: vim_command == 'vim'
- name: Create config directory
  file:
    path: '{{ vim_config_dir }}'
    state: directory
    recurse: yes
- name: Fetch new vimrc
  uri:
    url: https://vim-bootstrap.com/generate.vim
    method: POST
    body: '{{ lookup("vim_bootstrap_post", vim_langs, vim_frameworks, vim_theme, vim_command)|urlencode }}'
    return_content: yes
  register: vim_bootstrap_resp
- name: Write out vimrc
  copy:
    dest: '{{ vim_config_path }}'
    content: '{{ vim_bootstrap_resp.content }}'
    backup: yes
- name: Write custom plugins
  blockinfile:
    path: '{{ vim_localbundles_path }}'
    create: yes
    backup: '{{ vim_bootstrap_backup }}'
    marker: '" {mark} Generated by attakei.vim_bootstrap'
    block: |
      {% for plugin in vim_additional_plugins -%}
      Plug '{{ plugin }}'
      {% endfor %}
  when: 'vim_additional_plugins|length > 0'
- name: Write custom plugins
  blockinfile:
    path: '{{ vim_localconfig_path }}'
    create: yes
    backup: '{{ vim_bootstrap_backup }}'
    marker: '" {mark} Generated by attakei.vim_bootstrap'
    block: '{{ vim_extra_config }}'
  when: 'vim_extra_config|length > 0'
